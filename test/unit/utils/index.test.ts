import {
  util_accid,
  util_keylet,
  util_raddr,
  util_sha512h,
  util_verify,
} from '../../../src/api'
import { HOOK_RETURN_CODE } from '../../../src/context/interface'
import { BUF, defaultContext } from '../tools'

const { OUT_OF_BOUNDS, TOO_SMALL, INVALID_KEY, INVALID_ARGUMENT } =
  HOOK_RETURN_CODE

describe('utils', () => {
  const memory = new Uint8Array(1024)
  const ctx = defaultContext(memory)
  beforeEach(() => {
    memory.fill(0)
  })
  describe('util_raddr', () => {
    const mapping = [
      [
        [
          0x0c, 0x90, 0x4b, 0x4f, 0xa5, 0x59, 0xbf, 0x10, 0x6a, 0xae, 0xb5,
          0x28, 0x6c, 0x94, 0xba, 0x34, 0x18, 0xfd, 0xf3, 0x53,
        ],
        [
          0x72, 0x70, 0x39, 0x52, 0x79, 0x73, 0x42, 0x63, 0x55, 0x42, 0x59,
          0x63, 0x76, 0x4a, 0x4a, 0x4b, 0x38, 0x54, 0x48, 0x45, 0x79, 0x6f,
          0x79, 0x74, 0x74, 0x6b, 0x57, 0x58, 0x39, 0x4b, 0x52, 0x62, 0x39,
          0x4d,
        ],
      ],
      [
        [
          0x75, 0x82, 0xfb, 0x27, 0x10, 0x8c, 0x0f, 0x9a, 0xf2, 0x67, 0x35,
          0xcc, 0x7b, 0x22, 0x6b, 0xd2, 0x2f, 0xdf, 0x4f, 0x92,
        ],
        [
          0x72, 0x42, 0x35, 0x4c, 0x79, 0x77, 0x6b, 0x54, 0x4c, 0x31, 0x34,
          0x51, 0x64, 0x55, 0x64, 0x77, 0x43, 0x78, 0x70, 0x6e, 0x65, 0x46,
          0x32, 0x7a, 0x63, 0x7a, 0x46, 0x66, 0x44, 0x7a, 0x57, 0x46, 0x38,
          0x50,
        ],
      ],
      [
        [
          0x6c, 0xb6, 0x51, 0x1f, 0x20, 0xec, 0xca, 0x1e, 0x98, 0x03, 0xfc,
          0xfa, 0x6f, 0x3e, 0x56, 0x75, 0x72, 0x29, 0x51, 0x97,
        ],
        [
          0x72, 0x77, 0x75, 0x46, 0x50, 0x4b, 0x34, 0x48, 0x51, 0x4e, 0x73,
          0x59, 0x42, 0x47, 0x74, 0x46, 0x52, 0x4b, 0x77, 0x45, 0x6d, 0x75,
          0x41, 0x68, 0x63, 0x4b, 0x63, 0x48, 0x39, 0x5a, 0x32, 0x59, 0x7a,
          0x58,
        ],
      ],
      [
        [
          0xa5, 0x31, 0x30, 0x28, 0xf9, 0x62, 0xe4, 0x80, 0x48, 0x94, 0x3b,
          0x1a, 0x59, 0xbb, 0x5e, 0x36, 0x96, 0xb3, 0x44, 0x35,
        ],
        [
          0x72, 0x47, 0x68, 0x54, 0x52, 0x4a, 0x5a, 0x31, 0x56, 0x4d, 0x51,
          0x74, 0x36, 0x6a, 0x44, 0x72, 0x66, 0x4e, 0x63, 0x6f, 0x4a, 0x34,
          0x39, 0x6a, 0x34, 0x43, 0x67, 0x71, 0x4b, 0x6d, 0x52, 0x32, 0x6f,
          0x36,
        ],
      ],
      [
        [
          0xbf, 0x04, 0x6c, 0x79, 0xa0, 0x96, 0xde, 0x80, 0x66, 0xd3, 0x74,
          0xc8, 0xdf, 0x94, 0x5f, 0x89, 0xf2, 0x3e, 0x9a, 0x27,
        ],
        [
          0x72, 0x4a, 0x52, 0x72, 0x34, 0x72, 0x4c, 0x32, 0x43, 0x4a, 0x48,
          0x67, 0x46, 0x47, 0x56, 0x67, 0x31, 0x6a, 0x61, 0x66, 0x39, 0x4a,
          0x48, 0x51, 0x70, 0x56, 0x6d, 0x68, 0x76, 0x45, 0x37, 0x68, 0x61,
          0x62,
        ],
      ],
      [
        [
          0xe2, 0x07, 0xab, 0xd3, 0x7d, 0xc2, 0xcd, 0xd4, 0x6d, 0x15, 0x7b,
          0x67, 0x5a, 0xc8, 0x3e, 0x0e, 0x05, 0x9b, 0x08, 0x62,
        ],
        [
          0x72, 0x4d, 0x63, 0x33, 0x75, 0x4d, 0x6b, 0x4b, 0x31, 0x62, 0x62,
          0x32, 0x64, 0x4b, 0x7a, 0x5a, 0x64, 0x56, 0x71, 0x35, 0x75, 0x59,
          0x54, 0x55, 0x37, 0x5a, 0x76, 0x4e, 0x45, 0x41, 0x32, 0x33, 0x67,
          0x44,
        ],
      ],
      [
        [
          0x2a, 0x56, 0x74, 0x25, 0x84, 0x8d, 0x41, 0x6d, 0xf1, 0x06, 0x01,
          0x6c, 0x2a, 0xb1, 0x13, 0xc3, 0x1e, 0x65, 0x63, 0x80,
        ],
        [
          0x72, 0x68, 0x69, 0x69, 0x41, 0x78, 0x79, 0x59, 0x41, 0x43, 0x67,
          0x45, 0x52, 0x4b, 0x47, 0x51, 0x4d, 0x72, 0x53, 0x5a, 0x57, 0x43,
          0x74, 0x6b, 0x4d, 0x6f, 0x69, 0x58, 0x48, 0x34, 0x64, 0x48, 0x6e,
          0x6f,
        ],
      ],
      [
        [
          0x24, 0xbb, 0xa9, 0xc3, 0x95, 0x74, 0x9a, 0x88, 0x04, 0x12, 0xc0,
          0x91, 0xe7, 0x13, 0x41, 0x7f, 0x9a, 0xd5, 0x74, 0x43,
        ],
        [
          0x72, 0x68, 0x4d, 0x4e, 0x33, 0x79, 0x4e, 0x50, 0x4e, 0x74, 0x4b,
          0x70, 0x78, 0x6b, 0x71, 0x4c, 0x78, 0x51, 0x32, 0x63, 0x33, 0x55,
          0x68, 0x6f, 0x41, 0x7a, 0x66, 0x75, 0x59, 0x35, 0x75, 0x35, 0x4a,
          0x7a,
        ],
      ],
      [
        [
          0x49, 0x53, 0x9e, 0x65, 0x21, 0x8a, 0xcf, 0x37, 0x85, 0x2b, 0xff,
          0x87, 0x14, 0x76, 0xda, 0x1a, 0x62, 0x3a, 0xea, 0x80,
        ],
        [
          0x72, 0x66, 0x67, 0x35, 0x56, 0x41, 0x44, 0x41, 0x4d, 0x4d, 0x42,
          0x78, 0x46, 0x51, 0x76, 0x44, 0x78, 0x5a, 0x54, 0x32, 0x52, 0x6a,
          0x55, 0x64, 0x47, 0x69, 0x64, 0x59, 0x61, 0x35, 0x76, 0x69, 0x37,
          0x5a,
        ],
      ],
      [
        [
          0xe7, 0xd3, 0x03, 0xbc, 0xae, 0xbd, 0x62, 0x20, 0xae, 0xc2, 0xe1,
          0x7e, 0x0b, 0xff, 0xdc, 0x21, 0x24, 0x34, 0x50, 0x82,
        ],
        [
          0x72, 0x34, 0x33, 0x6d, 0x31, 0x31, 0x66, 0x74, 0x36, 0x79, 0x6f,
          0x50, 0x69, 0x6d, 0x36, 0x56, 0x44, 0x78, 0x64, 0x55, 0x76, 0x63,
          0x46, 0x77, 0x36, 0x57, 0x38, 0x41, 0x77, 0x78, 0x78, 0x4b, 0x35,
          0x58,
        ],
      ],
      [
        [
          0xd8, 0x74, 0xcf, 0x61, 0x0d, 0x97, 0xe4, 0xab, 0x76, 0xa0, 0x70,
          0x60, 0xb7, 0xc5, 0x9c, 0x9a, 0x88, 0x86, 0x62, 0xaa,
        ],
        [
          0x72, 0x4c, 0x6a, 0x57, 0x74, 0x59, 0x52, 0x61, 0x6e, 0x61, 0x6b,
          0x33, 0x74, 0x52, 0x43, 0x5a, 0x42, 0x69, 0x61, 0x38, 0x64, 0x33,
          0x70, 0x7a, 0x78, 0x6b, 0x6e, 0x63, 0x73, 0x7a, 0x6f, 0x33, 0x33,
          0x38,
        ],
      ],
      [
        [
          0x8e, 0xad, 0xb4, 0xbb, 0x71, 0x2a, 0x29, 0x1b, 0x53, 0x43, 0xe0,
          0x03, 0x1f, 0x97, 0x6b, 0x0d, 0xa9, 0xed, 0x39, 0xc2,
        ],
        [
          0x72, 0x4e, 0x72, 0x52, 0x73, 0x59, 0x57, 0x69, 0x4a, 0x53, 0x64,
          0x39, 0x47, 0x4a, 0x50, 0x50, 0x36, 0x51, 0x71, 0x33, 0x4a, 0x61,
          0x44, 0x43, 0x37, 0x53, 0x48, 0x61, 0x57, 0x66, 0x68, 0x32, 0x33,
          0x4b,
        ],
      ],
    ]

    it.each(mapping)('%#', (accId, raddr) => {
      memory.set(accId, 0)
      expect(util_raddr(20, 34, 0, 20, ctx)).toBe(34n)
      expect(memory.slice(20, 54)).toEqual(new Uint8Array(raddr))
    })

    it('Test out of bounds check', () => {
      expect(util_raddr(100000, 50, 0, 20, ctx)).toBe(OUT_OF_BOUNDS)
      expect(util_raddr(0, 50, 10000000, 20, ctx)).toBe(OUT_OF_BOUNDS)
      memory.set(
        [
          0x8e, 0xad, 0xb4, 0xbb, 0x71, 0x2a, 0x29, 0x1b, 0x53, 0x43, 0xe0,
          0x03, 0x1f, 0x97, 0x6b, 0x0d, 0xa9, 0xed, 0x39, 0xc2,
        ],
        0,
      )
      expect(util_raddr(0, 30, 0, 20, ctx)).toBe(TOO_SMALL)
    })
  })

  describe('util_accid', () => {
    const mapping: [string, number[]][] = [
      [
        'rMEGJtK2SttrtAfoKaqKUpCrDCi9saNuLg',
        [
          0xde, 0x15, 0x1e, 0x2f, 0xb2, 0xaa, 0xbd, 0x1a, 0x5b, 0xd0, 0x2f,
          0x63, 0x68, 0x26, 0xdf, 0x43, 0x50, 0xc0, 0x40, 0xde,
        ],
      ],
      [
        'rNo8xzUAauXENpvsMVJ9Q9w5LtVxCVFN4p',
        [
          0x97, 0x73, 0x23, 0xaa, 0x33, 0x7c, 0xb6, 0x82, 0x37, 0x83, 0x58,
          0x3a, 0x7a, 0xdf, 0x4e, 0xd8, 0x52, 0x2c, 0xa8, 0xf0,
        ],
      ],
      [
        'rUpwuJR1xLH18aHLP5nEm4Hw215tmkq6V7',
        [
          0x78, 0xe2, 0x10, 0xac, 0x98, 0x38, 0xf2, 0x5a, 0x3b, 0x7e, 0xde,
          0x51, 0x37, 0x13, 0x94, 0xed, 0x80, 0x77, 0x89, 0x48,
        ],
      ],
      [
        'ravUPmVUQ65qeuNSFiN6W2U88smjJYHBJm',
        [
          0x40, 0xe8, 0x2f, 0x55, 0xc7, 0x3a, 0xeb, 0xcf, 0xc9, 0x1d, 0x3b,
          0xf4, 0x77, 0x76, 0x50, 0x2b, 0x49, 0x7b, 0x12, 0x2c,
        ],
      ],
      [
        'rPXQ8PW1C382oewiEyJrAWtDQBNsQhAtWA',
        [
          0xf7, 0x13, 0x19, 0x49, 0x3f, 0xa6, 0xa3, 0xdb, 0x62, 0xae, 0x12,
          0x1b, 0x12, 0x6c, 0xfe, 0x81, 0x49, 0x5a, 0x49, 0x16,
        ],
      ],
      [
        'rnZbUT8tpm48KEdfELCxRjJJhNV1JNYcg5',
        [
          0x32, 0x0a, 0x5c, 0x53, 0x61, 0x5b, 0x4b, 0x57, 0x1d, 0xc4, 0x6f,
          0x13, 0xbd, 0x4f, 0x31, 0x70, 0x84, 0xd1, 0xb1, 0x68,
        ],
      ],
      [
        'rPghxri3jhBaxBfWGAHrVC4KANoRBe6dcM',
        [
          0xf8, 0xb6, 0x49, 0x2b, 0x5b, 0x21, 0xc8, 0xda, 0xbd, 0x0f, 0x1d,
          0x2f, 0xd9, 0xf4, 0x5b, 0xde, 0xcc, 0x6a, 0xeb, 0x91,
        ],
      ],
      [
        'r4Tck2QJcfcwBuTgVJXYb4QbrKP6mT1acM',
        [
          0xeb, 0x63, 0x4c, 0xd6, 0xf9, 0xbf, 0x50, 0xc1, 0xd9, 0x79, 0x30,
          0x84, 0x1b, 0xfc, 0x35, 0x32, 0xbd, 0x6d, 0xc0, 0x75,
        ],
      ],
      [
        'rETHUL5T1SzM6AMotnsK5V3J5XMwJ9UhZ2',
        [
          0x9e, 0x8a, 0x18, 0x66, 0x92, 0x0e, 0xe5, 0xed, 0xfa, 0xe3, 0x23,
          0x15, 0xcb, 0x83, 0xef, 0x73, 0xe4, 0x91, 0x0b, 0xca,
        ],
      ],
      [
        'rh9CggaWiY6QdD55ZkbbnrFpHJkKSauLfC',
        [
          0x22, 0x8b, 0xff, 0x31, 0xb4, 0x93, 0xf6, 0xc1, 0x12, 0xea, 0xd6,
          0xdf, 0xc4, 0x05, 0xb3, 0x7d, 0xc0, 0x65, 0x21, 0x34,
        ],
      ],
      [
        'r9sYGdPCGuJauy8QVG4CHnvp5U4eu3yY2B',
        [
          0x58, 0x3b, 0xf0, 0xcb, 0x95, 0x80, 0xde, 0xa0, 0xb3, 0x71, 0xd0,
          0x18, 0x17, 0x1a, 0xbb, 0x98, 0x1f, 0xcc, 0x7c, 0x68,
        ],
      ],
      [
        'r4yJX9eU65WHfmKz6xXmSRf9CZN6bXfpWb',
        [
          0xf1, 0x00, 0x8f, 0x64, 0x0f, 0x99, 0x19, 0xda, 0xcf, 0x48, 0x18,
          0x1c, 0x35, 0x2e, 0xe4, 0x3e, 0x37, 0x7c, 0x01, 0xf6,
        ],
      ],
      [
        'rBkXoWoXPHuZy2nHbE7L1zJfqAvb4jHRrK',
        [
          0x75, 0xec, 0xdb, 0x3b, 0x9a, 0x71, 0xd9, 0xef, 0xd6, 0x55, 0x15,
          0xdd, 0xea, 0xd2, 0x36, 0x7a, 0x05, 0x6f, 0x4e, 0x5f,
        ],
      ],
      [
        'rnaUBeEBNuyv57Jk127DsApEQoR8JqWpie',
        [
          0x2c, 0xdb, 0xeb, 0x1f, 0x5e, 0xc5, 0xd7, 0x5f, 0xac, 0xbd, 0x19,
          0xc8, 0x3f, 0x45, 0x3b, 0xa8, 0xa0, 0x1c, 0xdb, 0x0f,
        ],
      ],
      [
        'rJHmUPMQ6qYdaqMizDZY8FKcCqCJxYYnb3',
        [
          0xbd, 0xa5, 0xaf, 0xda, 0x5f, 0x04, 0xe7, 0xef, 0x16, 0x7a, 0x35,
          0x94, 0x6e, 0xef, 0x19, 0xfa, 0x12, 0xf3, 0x1c, 0x64,
        ],
      ],
      [
        'rpJtt64FNNtaEBgqbJcrrunucUWJSdKJa2',
        [
          0x0e, 0x5a, 0x83, 0x89, 0xc0, 0x5e, 0x56, 0xd1, 0x50, 0xbc, 0x45,
          0x7b, 0x86, 0x46, 0xf1, 0xcf, 0xb7, 0xd0, 0xbf, 0xd4,
        ],
      ],
      [
        'rUC2XjZURBYQ8r6i5sqWnhtDmFFdJFobb9',
        [
          0x7f, 0xf5, 0x2d, 0xf4, 0x98, 0x2b, 0x7c, 0x14, 0x7e, 0x9a, 0x8b,
          0xeb, 0x1a, 0x53, 0x60, 0x34, 0x95, 0x42, 0x4a, 0x44,
        ],
      ],
      [
        'rKEsw1ExpKaukXyyPCxeZdAF5V68kPSAVZ',
        [
          0xc8, 0x19, 0xe6, 0x2a, 0xdd, 0x42, 0x48, 0xd6, 0x7d, 0xa5, 0x56,
          0x66, 0x55, 0xb4, 0xbf, 0xde, 0x99, 0xcf, 0xed, 0x96,
        ],
      ],
      [
        'rEXhVGVWdte28r1DUzfgKLjNiHi1Tn6R7X',
        [
          0x9f, 0x41, 0x26, 0xa3, 0x6d, 0x56, 0x01, 0xc8, 0x09, 0x63, 0x76,
          0xed, 0x4c, 0x45, 0x66, 0x63, 0x16, 0xc9, 0x5c, 0x80,
        ],
      ],
      [
        'r3TcfPNEvidJ2LkNoFojffcCd7RgT53Thg',
        [
          0x51, 0xd1, 0x00, 0xff, 0x0d, 0x92, 0x18, 0x73, 0x80, 0x30, 0xc5,
          0x1a, 0xf2, 0x9f, 0x52, 0x8e, 0xb8, 0x63, 0x08, 0x7c,
        ],
      ],
    ]
    it.each(mapping)('%#', (raddr, accId) => {
      const encoded = new TextEncoder().encode(raddr)
      memory.set(encoded, 0)
      expect(util_accid(50, 20, 0, encoded.length, ctx)).toBe(20n)
      expect(memory.slice(50, 70)).toEqual(new Uint8Array(accId))
    })

    it('Test out of bounds check', () => {
      expect(util_accid(1000000, 20, 0, 35, ctx)).toBe(OUT_OF_BOUNDS)
      expect(util_accid(0, 35, 10000000, 20, ctx)).toBe(OUT_OF_BOUNDS)
      expect(util_accid(0, 19, 0, 0, ctx)).toBe(TOO_SMALL)
    })
  })

  describe('util_verify', () => {
    // secp256k1
    const pubkey_sec = [
      0x02, 0xc7, 0x38, 0x7f, 0xfc, 0x25, 0xc1, 0x56, 0xca, 0x7f, 0x8a, 0x6d,
      0x76, 0x0c, 0x8d, 0x01, 0xef, 0x64, 0x2c, 0xee, 0x9c, 0xe4, 0x68, 0x0c,
      0x33, 0xff, 0xb3, 0xff, 0x39, 0xaf, 0xec, 0xfe, 0x70,
    ]

    const sig_sec = [
      0x30, 0x45, 0x02, 0x21, 0x00, 0x95, 0x6e, 0x7d, 0x1f, 0x01, 0x16, 0xf1,
      0x65, 0x00, 0xd2, 0xcc, 0xd8, 0x8d, 0x2a, 0x2f, 0xef, 0xf6, 0x52, 0x16,
      0x85, 0x42, 0xf4, 0x4e, 0x43, 0xdb, 0xe6, 0xf4, 0x53, 0xe8, 0x03, 0xb8,
      0x4f, 0x02, 0x20, 0x0a, 0xb6, 0xc3, 0x4b, 0x5f, 0x0c, 0xc6, 0x6b, 0x4f,
      0x1f, 0x83, 0xe9, 0x89, 0x74, 0xb8, 0x80, 0xa2, 0x2f, 0xae, 0x52, 0x91,
      0x6b, 0xa2, 0xce, 0x96, 0xa3, 0x61, 0x05, 0x3f, 0xff, 0x81, 0xe9,
    ]

    // ed25519
    const pubkey_ed = [
      0xed, 0xd9, 0xb3, 0x59, 0x98, 0x02, 0xb2, 0x14, 0xa9, 0x9d, 0x75, 0x77,
      0x12, 0xd6, 0xab, 0xdf, 0x72, 0xf8, 0x3c, 0x63, 0xbb, 0xd5, 0x38, 0x61,
      0x41, 0x17, 0x90, 0xb1, 0x3d, 0x04, 0xb2, 0xc5, 0xc9,
    ]

    const sig_ed = [
      0x56, 0x68, 0x80, 0x76, 0x70, 0xfe, 0xce, 0x60, 0x34, 0xaf, 0xd6, 0xcd,
      0x1b, 0xb4, 0xc6, 0x60, 0xae, 0x08, 0x39, 0x6d, 0x6d, 0x8b, 0x7d, 0x22,
      0x71, 0x3b, 0xda, 0x26, 0x43, 0xc1, 0xe1, 0x91, 0xc4, 0xe4, 0x4d, 0x8e,
      0x02, 0xe8, 0x57, 0x8b, 0x20, 0x45, 0xda, 0xd4, 0x8f, 0x97, 0xfc, 0x16,
      0xf8, 0x92, 0x5b, 0x6b, 0x51, 0xfb, 0x3b, 0xe5, 0x0f, 0xb0, 0x4b, 0x3a,
      0x20, 0x4c, 0x53, 0x04,
    ]

    const msg = [0xde, 0xad, 0xbe, 0xef]

    it('Test out of bounds check', () => {
      expect(util_verify(1000000, 33, 0, 20, 0, 20, ctx)).toBe(OUT_OF_BOUNDS)
      expect(util_verify(0, 33, 10000000, 20, 0, 20, ctx)).toBe(OUT_OF_BOUNDS)
      expect(util_verify(0, 33, 0, 20, 10000000, 20, ctx)).toBe(OUT_OF_BOUNDS)
    })

    it('Test invalid key check', () => {
      expect(util_verify(0, 30, 0, 1, 0, 30, ctx)).toBe(INVALID_KEY)
      memory.set(pubkey_sec, 0)
      expect(util_verify(0, 33, 0, 0, 0, pubkey_sec.length, ctx)).toBe(
        TOO_SMALL,
      )
      expect(util_verify(0, 0, 0, 100, 0, pubkey_sec.length, ctx)).toBe(
        TOO_SMALL,
      )
    })

    it('test secp256k1 verification', () => {
      memory.set(pubkey_sec, 0)
      memory.set(sig_sec, 100)
      memory.set(msg, 200)
      expect(
        util_verify(
          200,
          msg.length,
          100,
          sig_sec.length,
          0,
          pubkey_sec.length,
          ctx,
        ),
      ).toBe(1n)
      expect(
        util_verify(
          201,
          msg.length - 1,
          100,
          sig_sec.length,
          0,
          pubkey_sec.length,
          ctx,
        ),
      ).toBe(0n)
    })

    it('test ed25519 verification', () => {
      memory.set(pubkey_ed, 0)
      memory.set(sig_ed, 100)
      memory.set(msg, 200)
      expect(
        util_verify(
          200,
          msg.length,
          100,
          sig_ed.length,
          0,
          pubkey_ed.length,
          ctx,
        ),
      ).toBe(1n)
      expect(
        util_verify(
          201,
          msg.length - 1,
          100,
          sig_ed.length,
          0,
          pubkey_ed.length,
          ctx,
        ),
      ).toBe(0n)
    })
  })

  describe('util_sha512h', () => {
    const mapping = [
      [
        [
          0x72, 0x4e, 0x36, 0x53, 0x59, 0x77, 0x72, 0x32, 0x64, 0x54, 0x56,
          0x43, 0x7a, 0x45, 0x71, 0x39, 0x57, 0x43, 0x77, 0x4a,
        ],
        [
          0x42, 0x5c, 0x4c, 0x01, 0x84, 0xa5, 0x76, 0x79, 0xdc, 0x6d, 0xff,
          0x40, 0x8c, 0x29, 0x06, 0x6b, 0x0f, 0xb9, 0xea, 0x34,
        ],
      ],
      [
        [
          0x72, 0x4b, 0x4b, 0x75, 0x52, 0x36, 0x36, 0x46, 0x62, 0x38, 0x33,
          0x76, 0x35, 0x71, 0x79, 0x41, 0x34, 0x48, 0x67, 0x6a,
        ],
        [
          0x36, 0x2c, 0x32, 0x1d, 0x8d, 0xdd, 0xaf, 0x2d, 0x3c, 0xe6, 0x94,
          0x12, 0x20, 0xda, 0x62, 0xa6, 0x98, 0x41, 0x04, 0x5e,
        ],
      ],
      [
        [
          0x72, 0x42, 0x54, 0x33, 0x58, 0x57, 0x43, 0x76, 0x61, 0x38, 0x48,
          0x55, 0x4e, 0x4e, 0x5a, 0x46, 0x6a, 0x5a, 0x43, 0x55,
        ],
        [
          0xcf, 0xfd, 0x6f, 0x01, 0x95, 0x76, 0x7d, 0xfb, 0xca, 0x41, 0xfd,
          0x24, 0x23, 0xd6, 0x82, 0x20, 0x76, 0xdd, 0xc9, 0xec,
        ],
      ],
      [
        [
          0x72, 0x4c, 0x52, 0x4c, 0x41, 0x6e, 0x61, 0x62, 0x56, 0x6f, 0x46,
          0x62, 0x37, 0x47, 0x68, 0x79, 0x58, 0x75, 0x42, 0x53,
        ],
        [
          0x02, 0xeb, 0x2f, 0x30, 0xfc, 0x73, 0x34, 0xe7, 0x89, 0xa2, 0x58,
          0xd6, 0xb0, 0x55, 0x32, 0x96, 0xb5, 0x2e, 0x97, 0x81,
        ],
      ],
      [
        [
          0x72, 0x4c, 0x37, 0x33, 0x39, 0x47, 0x4b, 0x35, 0x75, 0x36, 0x79,
          0x78, 0x76, 0x43, 0x73, 0x6f, 0x68, 0x43, 0x32, 0x43,
        ],
        [
          0x9f, 0xd4, 0x7c, 0x25, 0xde, 0x23, 0x97, 0x57, 0xed, 0x25, 0xd0,
          0x98, 0xf7, 0x83, 0x70, 0xf6, 0x5f, 0x3d, 0xb5, 0x43,
        ],
      ],
      [
        [
          0x72, 0x4d, 0x4d, 0x45, 0x57, 0x74, 0x75, 0x4b, 0x43, 0x77, 0x54,
          0x43, 0x36, 0x31, 0x78, 0x41, 0x78, 0x35, 0x55, 0x46,
        ],
        [
          0x77, 0x59, 0x43, 0x6b, 0x4d, 0x11, 0x6b, 0xe5, 0xf8, 0x90, 0x07,
          0x00, 0xb3, 0xb2, 0x6b, 0x8a, 0xc8, 0xf2, 0x82, 0xb7,
        ],
      ],
      [
        [
          0x72, 0x66, 0x48, 0x6a, 0x66, 0x31, 0x6b, 0x70, 0x4b, 0x6a, 0x39,
          0x66, 0x6a, 0x39, 0x35, 0x58, 0x6a, 0x59, 0x69, 0x51,
        ],
        [
          0xbd, 0x1b, 0xdd, 0x9d, 0x10, 0xde, 0x24, 0xa1, 0xb2, 0x6c, 0x24,
          0xbc, 0xf9, 0x97, 0x50, 0xde, 0x93, 0x39, 0x58, 0x21,
        ],
      ],
      [
        [
          0x72, 0x6e, 0x6d, 0x6f, 0x6a, 0x57, 0x46, 0x6f, 0x41, 0x58, 0x72,
          0x76, 0x71, 0x75, 0x62, 0x6f, 0x45, 0x77, 0x4e, 0x4e,
        ],
        [
          0x5f, 0x26, 0xf9, 0x0a, 0xc7, 0xd5, 0x40, 0x2d, 0x1f, 0x9e, 0x46,
          0xaa, 0x6d, 0x9c, 0x64, 0x88, 0x87, 0xf3, 0x29, 0x72,
        ],
      ],
      [
        [
          0x72, 0x61, 0x33, 0x57, 0x65, 0x64, 0x69, 0x71, 0x58, 0x37, 0x34,
          0x79, 0x42, 0x42, 0x68, 0x48, 0x4c, 0x44, 0x51, 0x4d,
        ],
        [
          0x25, 0x70, 0x5f, 0x6d, 0xa8, 0x60, 0x54, 0xba, 0xd8, 0x33, 0x41,
          0x48, 0x95, 0x52, 0xa6, 0x22, 0x9d, 0x82, 0xa0, 0x87,
        ],
      ],
      [
        [
          0x72, 0x45, 0x47, 0x57, 0x33, 0x6b, 0x6f, 0x34, 0x41, 0x31, 0x69,
          0x50, 0x43, 0x5a, 0x54, 0x78, 0x6d, 0x77, 0x6a, 0x44,
        ],
        [
          0xd4, 0xda, 0xe0, 0xc7, 0x40, 0xc4, 0x28, 0x59, 0xa9, 0x6d, 0x91,
          0xdc, 0x34, 0x0d, 0xb9, 0xe6, 0xe9, 0x9d, 0x04, 0x0b,
        ],
      ],
      [
        [
          0x72, 0x68, 0x52, 0x46, 0x71, 0x54, 0x35, 0x45, 0x39, 0x7a, 0x63,
          0x69, 0x70, 0x68, 0x4c, 0x54, 0x39, 0x78, 0x6a, 0x52,
        ],
        [
          0x61, 0x5b, 0xfe, 0x17, 0x6e, 0x81, 0x42, 0xff, 0xee, 0xd7, 0x1a,
          0x6d, 0x14, 0x5d, 0x64, 0xa8, 0x20, 0x1a, 0x33, 0xc3,
        ],
      ],
      [
        [
          0x72, 0x70, 0x61, 0x4a, 0x69, 0x34, 0x4c, 0x62, 0x55, 0x36, 0x55,
          0x63, 0x4a, 0x45, 0x78, 0x62, 0x38, 0x39, 0x35, 0x5a,
        ],
        [
          0x01, 0x61, 0xa4, 0x8e, 0x6d, 0x20, 0xba, 0x20, 0x72, 0x72, 0x8f,
          0x4f, 0x3f, 0xe1, 0xe1, 0xe7, 0xeb, 0x15, 0xa8, 0x4c,
        ],
      ],
      [
        [
          0x72, 0x34, 0x59, 0x78, 0x47, 0x46, 0x71, 0x51, 0x64, 0x47, 0x70,
          0x71, 0x6e, 0x4c, 0x59, 0x65, 0x4d, 0x38, 0x56, 0x52,
        ],
        [
          0x42, 0xc5, 0x2f, 0x3b, 0xb7, 0xd4, 0x54, 0xb4, 0x97, 0xb4, 0xfc,
          0xb0, 0x46, 0xba, 0xb6, 0xad, 0x93, 0x8d, 0xeb, 0x7d,
        ],
      ],
      [
        [
          0x72, 0x33, 0x76, 0x71, 0x75, 0x79, 0x72, 0x45, 0x39, 0x55, 0x53,
          0x70, 0x68, 0x62, 0x43, 0x55, 0x6d, 0x65, 0x4b, 0x55,
        ],
        [
          0xd5, 0x6b, 0x6b, 0x45, 0x30, 0xf0, 0x34, 0x76, 0x31, 0x56, 0x8c,
          0x38, 0x0c, 0x1a, 0xaf, 0xab, 0x42, 0x16, 0x21, 0x42,
        ],
      ],
    ]
    it.each(mapping)('%#', (raw, hash) => {
      memory.set(raw, 0)
      memory.set(hash, 100)
      expect(util_sha512h(100, 32, 0, raw.length, ctx)).toBe(32n)
      expect(memory.slice(100, 100 + 32).slice(0, hash.length)).include(hash)
    })

    it('Test out of bounds check', () => {
      expect(util_sha512h(0, 30, 0, 20, ctx)).toBe(TOO_SMALL)
      expect(util_sha512h(0, 50, 10000000, 20, ctx)).toBe(OUT_OF_BOUNDS)
      const raw = [
        0x8e, 0xad, 0xb4, 0xbb, 0x71, 0x2a, 0x29, 0x1b, 0x53, 0x43, 0xe0, 0x03,
        0x1f, 0x97, 0x6b, 0x0d, 0xa9, 0xed, 0x39, 0xc2,
      ]
      memory.set(raw, 0)
      expect(util_sha512h(0, 30, 0, 20, ctx)).toBe(TOO_SMALL)
    })
  })

  describe('util_keylet', () => {
    const KEYLET_HOOK = 1
    const KEYLET_HOOK_STATE = 2
    const KEYLET_ACCOUNT = 3
    const KEYLET_AMENDMENTS = 4
    const KEYLET_CHILD = 5
    const KEYLET_SKIP = 6
    const KEYLET_FEES = 7
    const KEYLET_NEGATIVE_UNL = 8
    const KEYLET_LINE = 9
    const KEYLET_OFFER = 10
    const KEYLET_QUALITY = 11
    const KEYLET_EMITTED_DIR = 12
    const KEYLET_SIGNERS = 14
    const KEYLET_CHECK = 15
    const KEYLET_DEPOSIT_PREAUTH = 16
    const KEYLET_UNCHECKED = 17
    const KEYLET_OWNER_DIR = 18
    const KEYLET_PAGE = 19
    const KEYLET_ESCROW = 20
    const KEYLET_PAYCHAN = 21
    const KEYLET_EMITTED_TXN = 22
    const KEYLET_NFT_OFFER = 23
    it('bounds tests', () => {
      const buf = BUF.empty(1, 34)
      expect(util_keylet(1000000, 34, KEYLET_SKIP, 0, 0, 0, 0, 0, 0, ctx)).toBe(
        OUT_OF_BOUNDS,
      )
      expect(
        util_keylet(buf.ptr, 1000000, KEYLET_SKIP, 0, 0, 0, 0, 0, 0, ctx),
      ).toBe(OUT_OF_BOUNDS)
    })
    it('Test min size', () => {
      const buf = BUF.empty(1, 34)
      expect(util_keylet(buf.ptr, 33, KEYLET_SKIP, 0, 0, 0, 0, 0, 0, ctx)).toBe(
        TOO_SMALL,
      )
    })
    //C5D0F34B0A1905BC3B29AA1BE139FE04D60C8694D3950A8D80251D10B563A822
    const ns = [
      0xc5, 0xd0, 0xf3, 0x4b, 0x0a, 0x19, 0x05, 0xbc, 0x3b, 0x29, 0xaa, 0x1b,
      0xe1, 0x39, 0xfe, 0x04, 0xd6, 0x0c, 0x86, 0x94, 0xd3, 0x95, 0x0a, 0x8d,
      0x80, 0x25, 0x1d, 0x10, 0xb5, 0x63, 0xa8, 0x22,
    ]

    //2D0CB3CD60DA33B5AA7FEA321F111663EAED32481C6B700E484550F45AD96223
    const klkey = [
      0x00, 0x00, 0x2d, 0x0c, 0xb3, 0xcd, 0x60, 0xda, 0x33, 0xb5, 0xaa, 0x7f,
      0xea, 0x32, 0x1f, 0x11, 0x16, 0x63, 0xea, 0xed, 0x32, 0x48, 0x1c, 0x6b,
      0x70, 0x0e, 0x48, 0x45, 0x50, 0xf4, 0x5a, 0xd9, 0x62, 0x23,
    ]
    const key = klkey.slice(2)

    const cur = [
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x55, 0x53, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00,
    ]

    //rB6v18pQ765Z9DH5RQsTFevoQPFmRtBqhT
    const a = [
      0x75, 0x6e, 0xde, 0x88, 0xa9, 0x07, 0xd4, 0xcc, 0xf3, 0x8d, 0x6a, 0xdb,
      0x9f, 0xc7, 0x94, 0x64, 0x19, 0xf0, 0xc4, 0x1d,
    ]

    //raKM1bZkGmASBqN5v2swrf2uAPJ32Cd8GV
    const b = [
      0x3a, 0x51, 0x8a, 0x22, 0x53, 0x81, 0x60, 0x84, 0x1c, 0x14, 0x32, 0xfe,
      0x6f, 0x3e, 0x6d, 0x6e, 0x76, 0x29, 0xfb, 0xba,
    ]

    const cases = [
      //[keylet_type, a,c,e, ans]
      [
        KEYLET_HOOK,
        a,
        null,
        null,
        [
          0x00, 0x48, 0x6c, 0x4b, 0x29, 0xc6, 0x0f, 0x40, 0x5d, 0xb7, 0x6e,
          0x87, 0x65, 0x4a, 0x2f, 0x15, 0x4b, 0xab, 0x99, 0xc7, 0x62, 0x29,
          0x80, 0x10, 0xa1, 0x89, 0x78, 0x52, 0x90, 0x80, 0x2f, 0x78, 0xbd,
          0xcc,
        ],
      ],
      [
        KEYLET_HOOK_STATE,
        b,
        key,
        ns,
        [
          0x00, 0x76, 0x28, 0xaf, 0xcc, 0x25, 0x0a, 0x64, 0x41, 0x8e, 0xb7,
          0x83, 0x68, 0xeb, 0x4e, 0xc5, 0x52, 0x4a, 0xeb, 0x97, 0x54, 0xab,
          0xc1, 0x0b, 0x13, 0x06, 0x7f, 0xfb, 0x9f, 0x4b, 0xd8, 0x38, 0x62,
          0xf2,
        ],
      ],
      [
        KEYLET_ACCOUNT,
        b,
        null,
        null,
        [
          0x00, 0x61, 0xc6, 0x55, 0xdd, 0x8d, 0x8e, 0xd3, 0xba, 0xb4, 0xa0,
          0xf1, 0xec, 0x2d, 0xa9, 0x99, 0xf4, 0x1b, 0xa6, 0x82, 0xc6, 0x84,
          0xf9, 0x99, 0x66, 0xb9, 0x3c, 0x9a, 0xc3, 0xe3, 0x5c, 0x9a, 0x81,
          0x6d,
        ],
      ],
      [
        KEYLET_AMENDMENTS,
        null,
        null,
        null,
        [
          0x00, 0x66, 0x7d, 0xb0, 0x78, 0x8c, 0x02, 0x0f, 0x02, 0x78, 0x0a,
          0x67, 0x3d, 0xc7, 0x47, 0x57, 0xf2, 0x38, 0x23, 0xfa, 0x30, 0x14,
          0xc1, 0x86, 0x6e, 0x72, 0xcc, 0x4c, 0xd8, 0xb2, 0x26, 0xcd, 0x6e,
          0xf4,
        ],
      ],
      [
        KEYLET_SKIP,
        null,
        null,
        null,
        [
          0x00, 0x68, 0xb4, 0x97, 0x9a, 0x36, 0xcd, 0xc7, 0xf3, 0xd3, 0xd5,
          0xc3, 0x1a, 0x4e, 0xae, 0x2a, 0xc7, 0xd7, 0x20, 0x9d, 0xda, 0x87,
          0x75, 0x88, 0xb9, 0xaf, 0xc6, 0x67, 0x99, 0x69, 0x2a, 0xb0, 0xd6,
          0x6b,
        ],
      ],
      [KEYLET_CHILD, key, null, null, [0x1c, 0xd2, ...klkey.slice(2)]],
      [
        KEYLET_FEES,
        null,
        null,
        null,
        [
          0x00, 0x73, 0x4b, 0xc5, 0x0c, 0x9b, 0x0d, 0x85, 0x15, 0xd3, 0xea,
          0xae, 0x1e, 0x74, 0xb2, 0x9a, 0x95, 0x80, 0x43, 0x46, 0xc4, 0x91,
          0xee, 0x1a, 0x95, 0xbf, 0x25, 0xe4, 0xaa, 0xb8, 0x54, 0xa6, 0xa6,
          0x51,
        ],
      ],
      [
        KEYLET_NEGATIVE_UNL,
        null,
        null,
        null,
        [
          0x00, 0x4e, 0x2e, 0x8a, 0x59, 0xaa, 0x9d, 0x3b, 0x5b, 0x18, 0x6b,
          0x0b, 0x9e, 0x0f, 0x62, 0xe6, 0xc0, 0x25, 0x87, 0xca, 0x74, 0xa4,
          0xd7, 0x78, 0x93, 0x8e, 0x95, 0x7b, 0x63, 0x57, 0xd3, 0x64, 0xb2,
          0x44,
        ],
      ],
      [
        KEYLET_LINE,
        a,
        b,
        cur,
        [
          0x00, 0x72, 0x0e, 0xb8, 0x2a, 0xdd, 0x5e, 0x15, 0x59, 0x1b, 0xf6,
          0xe3, 0x6d, 0xbc, 0x3c, 0x12, 0xd3, 0x07, 0x6d, 0x43, 0xa8, 0x53,
          0xf8, 0xf9, 0xe8, 0xa7, 0xd8, 0x4f, 0xe1, 0xe9, 0x7a, 0x2a, 0xc7,
          0x3d,
        ],
      ],
      [
        KEYLET_LINE,
        a,
        b,
        ['U'.charCodeAt(0), 'S'.charCodeAt(0), 'D'.charCodeAt(0)],
        [
          0x00, 0x72, 0x0e, 0xb8, 0x2a, 0xdd, 0x5e, 0x15, 0x59, 0x1b, 0xf6,
          0xe3, 0x6d, 0xbc, 0x3c, 0x12, 0xd3, 0x07, 0x6d, 0x43, 0xa8, 0x53,
          0xf8, 0xf9, 0xe8, 0xa7, 0xd8, 0x4f, 0xe1, 0xe9, 0x7a, 0x2a, 0xc7,
          0x3d,
        ],
      ],
      // The following KEYLETs with sequence are tested separately.
      // KEYLET_OFFER
      // KEYLET_CHECK
      // KEYLET_ESCROW
      // KEYLET_NFT_OFFER
      [
        KEYLET_OFFER,
        a,
        ns,
        null,
        [
          0x00, 0x6f, 0x23, 0x61, 0x7f, 0x44, 0x91, 0x1c, 0xba, 0x3b, 0x5c,
          0xbe, 0xe9, 0x42, 0x22, 0xac, 0xa4, 0x29, 0xf4, 0xd6, 0x60, 0x01,
          0xa8, 0xab, 0x9b, 0x98, 0x5e, 0xb8, 0xb8, 0x42, 0x9f, 0x1e, 0x91,
          0x4b,
        ],
      ],
      // The following KEYLET is tested separately.
      // KEYLET_QUALITY
      [
        KEYLET_EMITTED_DIR,
        null,
        null,
        null,
        [
          0x00, 0x64, 0xb4, 0xde, 0x82, 0x30, 0x55, 0xd0, 0x0b, 0xc1, 0x2c,
          0xd7, 0x8f, 0xe1, 0xaa, 0xf7, 0x4e, 0xe6, 0x06, 0x21, 0x95, 0xb2,
          0x62, 0x9f, 0x49, 0xa2, 0x59, 0x15, 0xa3, 0x9c, 0x64, 0xbe, 0x19,
          0x00,
        ],
      ],
      [
        KEYLET_SIGNERS,
        a,
        null,
        null,
        [
          0x00, 0x53, 0xdf, 0x8f, 0xf0, 0xce, 0x41, 0x1a, 0x3b, 0x8f, 0x1b,
          0xb5, 0xbb, 0x32, 0x78, 0x17, 0x15, 0xd6, 0x77, 0x42, 0xf5, 0xb5,
          0x63, 0xb8, 0x77, 0xb3, 0x3b, 0x07, 0x76, 0xf6, 0xf7, 0xbc, 0xda,
          0x1d,
        ],
      ],
      [
        KEYLET_SIGNERS,
        a,
        null,
        null,
        [
          0x00, 0x53, 0xdf, 0x8f, 0xf0, 0xce, 0x41, 0x1a, 0x3b, 0x8f, 0x1b,
          0xb5, 0xbb, 0x32, 0x78, 0x17, 0x15, 0xd6, 0x77, 0x42, 0xf5, 0xb5,
          0x63, 0xb8, 0x77, 0xb3, 0x3b, 0x07, 0x76, 0xf6, 0xf7, 0xbc, 0xda,
          0x1d,
        ],
      ],
      [
        KEYLET_CHECK,
        a,
        ns,
        null,
        [
          0x00, 0x43, 0x94, 0xe3, 0x6f, 0x0d, 0xd3, 0xed, 0xc0, 0x2c, 0x49,
          0xa5, 0xaa, 0x0e, 0xcc, 0x49, 0x18, 0x39, 0x92, 0xab, 0x57, 0xc3,
          0x2d, 0x9e, 0x45, 0x51, 0x04, 0x78, 0x49, 0x49, 0xd1, 0xe6, 0xd2,
          0x01,
        ],
      ],
      [
        KEYLET_DEPOSIT_PREAUTH,
        a,
        b,
        null,
        [
          0x00, 0x70, 0x88, 0x90, 0x0f, 0x27, 0x66, 0x57, 0xbc, 0xc0, 0x5d,
          0xa1, 0x67, 0x40, 0xab, 0x9d, 0x33, 0x01, 0x8e, 0x45, 0x71, 0x7b,
          0x0e, 0xc4, 0x2e, 0x4d, 0x11, 0xbd, 0x6d, 0xbd, 0x94, 0x03, 0x48,
          0xe0,
        ],
      ],
      [
        KEYLET_OWNER_DIR,
        a,
        null,
        null,
        [
          0x00, 0x64, 0xc8, 0x5e, 0x01, 0x29, 0x06, 0x7b, 0x75, 0xad, 0x30,
          0xb0, 0xaa, 0x1c, 0xc2, 0x5b, 0x0a, 0x82, 0xc7, 0xf9, 0xaa, 0xbd,
          0xee, 0x05, 0xff, 0x01, 0x66, 0x69, 0xef, 0x9d, 0x82, 0xdc, 0xec,
          0x30,
        ],
      ],
      [
        KEYLET_ESCROW,
        a,
        ns,
        null,
        [
          0x00, 0x75, 0xc1, 0xc6, 0xc5, 0x23, 0x74, 0x87, 0x12, 0x56, 0xaa,
          0x7a, 0x1f, 0xb3, 0x29, 0x7a, 0x0a, 0x55, 0x88, 0x7d, 0x16, 0x6a,
          0xcf, 0x85, 0x28, 0x59, 0x88, 0xc2, 0xda, 0x81, 0x7f, 0x03, 0x90,
          0x43,
        ],
      ],
      [
        KEYLET_PAYCHAN,
        a,
        b,
        ns,
        [
          0x00, 0x78, 0x7d, 0xe1, 0x01, 0xf6, 0x2b, 0xb0, 0x55, 0x80, 0xb9,
          0xd6, 0xb0, 0x3f, 0x3b, 0xb0, 0x01, 0xbd, 0xe6, 0x9b, 0x89, 0x0f,
          0x8a, 0xcd, 0xbe, 0x71, 0x73, 0x5e, 0xc3, 0x63, 0xf8, 0xc5, 0x4b,
          0x9b,
        ],
      ],
      [
        KEYLET_EMITTED_TXN,
        ns,
        null,
        null,
        [
          0x00, 0x45, 0xf3, 0x51, 0x2d, 0x1c, 0x80, 0xa3, 0xc0, 0xb1, 0x46,
          0x04, 0xe1, 0xad, 0xdb, 0x90, 0x1c, 0x66, 0x32, 0x10, 0x08, 0xcc,
          0xd0, 0xab, 0xd2, 0xdb, 0xbe, 0xc4, 0x08, 0xa6, 0x0f, 0x6a, 0x62,
          0xe9,
        ],
      ],
    ] as [number, number[] | null, number[] | null, number[] | null, number[]][]
    it.each(cases)('Test one of each type %d', (keylet, a, c, e, ans) => {
      const buf = BUF.empty(1, 34)
      let _a: BUF
      let _c: BUF
      let _e: BUF
      if (a) {
        _a = BUF.from(a, 100)
        _a.set(memory)
      } else {
        _a = BUF.empty(1, 100)
      }
      if (c) {
        _c = BUF.from(c, 200)
        _c.set(memory)
      } else {
        _c = BUF.empty(1, 200)
      }
      if (e) {
        _e = BUF.from(e, 300)
        _e.set(memory)
      } else {
        _e = BUF.empty(1, 300)
      }
      expect(
        util_keylet(
          ...buf.sbuf(),
          keylet,
          ...(a ? _a.sbuf() : ([0, 0] as [number, number])),
          ...(c ? _c.sbuf() : ([0, 0] as [number, number])),
          ...(e ? _e.sbuf() : ([0, 0] as [number, number])),
          ctx,
        ),
      ).toBe(34n)
      const bufResult = buf.get(memory)
      expect(Buffer.from(bufResult).toString('hex')).toStrictEqual(
        Buffer.from(ans).toString('hex'),
      )
    })
    const seqCases = [
      //[keylet_type, a,c,ans]
      [
        KEYLET_OFFER,
        a,
        1,
        [
          0x00, 0x6f, 0x60, 0x14, 0x48, 0x80, 0x97, 0x5f, 0x76, 0x6a, 0xb2,
          0x2c, 0x32, 0x2f, 0x10, 0x8e, 0x03, 0x43, 0x51, 0xde, 0x89, 0x6c,
          0xf4, 0x9f, 0x6b, 0x4a, 0xc7, 0x2c, 0x54, 0xf7, 0x27, 0x29, 0x9b,
          0xe8,
        ],
      ],
      [
        KEYLET_CHECK,
        a,
        1,
        [
          0x00, 0x43, 0x08, 0x1f, 0x26, 0xff, 0x79, 0x1a, 0xf7, 0x54, 0x26,
          0xed, 0xf9, 0xeb, 0x08, 0x44, 0x85, 0x28, 0x58, 0x2c, 0xb1, 0xa4,
          0xef, 0x4f, 0xd0, 0xb4, 0x49, 0x9b, 0x76, 0x82, 0xe7, 0x69, 0xa6,
          0xb5,
        ],
      ],
      [
        KEYLET_ESCROW,
        a,
        1,
        [
          0x00, 0x75, 0x13, 0xef, 0x04, 0xcd, 0x33, 0x6a, 0xad, 0xf6, 0x3d,
          0x0c, 0x7e, 0x05, 0x6c, 0x84, 0x9a, 0x7c, 0xf6, 0x72, 0x5e, 0x99,
          0xbc, 0x93, 0x80, 0x1e, 0xf5, 0x78, 0xa0, 0x32, 0x72, 0x5b, 0x84,
          0xfe,
        ],
      ],
    ] as [number, number[], number, number[]][]
    it.each(seqCases)(
      'Test one of each type (with sequence) %d',
      (keylet, a, c, ans) => {
        const buf = BUF.empty(1, 34)
        const _a = BUF.from(a, 100)
        _a.set(memory)

        expect(
          util_keylet(...buf.sbuf(), keylet, ..._a.sbuf(), c, 0, 0, 0, ctx),
        ).toBe(34n)

        expect(Buffer.from(buf.get(memory)).toString('hex')).toStrictEqual(
          Buffer.from(ans).toString('hex'),
        )
      },
    )
    it('line error', () => {
      const cur = ['`'.charCodeAt(0), 'S'.charCodeAt(0), 'D'.charCodeAt(0)]
      const buf = BUF.empty(1, 34)
      const _a = BUF.from(a, 100)
      _a.set(memory)
      const _c = BUF.from(b, 200)
      _c.set(memory)
      const _e = BUF.from(cur, 300)
      _e.set(memory)
      expect(
        util_keylet(
          ...buf.sbuf(),
          KEYLET_LINE,
          ..._a.sbuf(),
          ..._c.sbuf(),
          ..._e.sbuf(),
          ctx,
        ),
      ).toBe(INVALID_ARGUMENT)
    })
    it('KEYLET_UNCHECKED', () => {
      const buf = BUF.empty(1, 34)
      const _a = BUF.from(key, 100)
      _a.set(memory)
      expect(
        util_keylet(
          ...buf.sbuf(),
          KEYLET_UNCHECKED,
          ..._a.sbuf(),
          0,
          0,
          0,
          0,
          ctx,
        ),
      ).toBe(34n)
      for (let i = 0; i < 34; i++) {
        if (i < 2) {
          expect(buf.get(memory)[i]).toBe(0)
        } else {
          expect(buf.get(memory)[i]).toBe(klkey[i])
        }
      }
    })
    it('KEYLET_PAGE', () => {
      const buf = BUF.empty(1, 34)
      const _a = BUF.from(ns, 100)
      _a.set(memory)
      expect(
        util_keylet(...buf.sbuf(), KEYLET_PAGE, ..._a.sbuf(), 0, 1, 0, 0, ctx),
      ).toBe(34n)
      const ans = [
        0x00, 0x64, 0x61, 0xe6, 0x05, 0x1a, 0xb0, 0x49, 0x89, 0x2e, 0x75, 0xc9,
        0x3d, 0x67, 0xfb, 0x7a, 0x63, 0xf1, 0xef, 0x56, 0xdd, 0xaf, 0x3e, 0x6b,
        0x43, 0x6f, 0x57, 0x6e, 0x8c, 0x01, 0x81, 0x98, 0x2e, 0x48,
      ]

      expect(Buffer.from(buf.get(memory)).toString('hex')).toStrictEqual(
        Buffer.from(ans).toString('hex'),
      )
    })
    describe.todo('KEYLET_QUALITY', () => {
      it('error', () => {
        const buf = BUF.empty(1, 34)
        const k = [0, 0x65, ...klkey.slice(2)]
        const _a = BUF.from(k, 100)
        _a.set(memory)
        expect(
          util_keylet(
            ...buf.sbuf(),
            KEYLET_QUALITY,
            ..._a.sbuf(),
            0,
            1,
            0,
            0,
            ctx,
          ),
        ).toBe(INVALID_ARGUMENT)
      })
      it('success', () => {
        const buf = BUF.empty(1, 34)
        const k = [klkey[0], 0x64, ...klkey.slice(2)]
        const _a = BUF.from(k, 100)
        _a.set(memory)
        expect(
          util_keylet(
            ...buf.sbuf(),
            KEYLET_QUALITY,
            ..._a.sbuf(),
            0,
            1,
            0,
            0,
            ctx,
          ),
        ).toBe(34n)
        const ans = [
          0x00, 0x64, 0x2d, 0x0c, 0xb3, 0xcd, 0x60, 0xda, 0x33, 0xb5, 0xaa,
          0x7f, 0xea, 0x32, 0x1f, 0x11, 0x16, 0x63, 0xea, 0xed, 0x32, 0x48,
          0x1c, 0x6b, 0x70, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
          0x01,
        ]
        expect(Buffer.from(buf.get(memory)).toString('hex')).toStrictEqual(
          Buffer.from(ans).toString('hex'),
        )
      })
    })
    it('KEYLET_NFT_OFFER', () => {
      const buf = BUF.empty(1, 34)
      const _a = BUF.from(a, 100)
      _a.set(memory)
      const _ns = BUF.from(ns, 200)
      _ns.set(memory)
      expect(
        util_keylet(
          ...buf.sbuf(),
          KEYLET_NFT_OFFER,
          ..._a.sbuf(),
          1,
          0,
          0,
          0,
          ctx,
        ),
      ).toBe(34n)
      expect(
        util_keylet(
          ...buf.sbuf(),
          KEYLET_NFT_OFFER,
          ..._a.sbuf(),
          ..._ns.sbuf(),
          0,
          0,
          ctx,
        ),
      ).toBe(34n)
    })
    it('KEYLET_PAYCHAN', () => {
      const buf = BUF.empty(1, 34)
      const _a = BUF.from(a, 100)
      _a.set(memory)
      const _b = BUF.from(b, 200)
      _b.set(memory)
      const _ns = BUF.from(ns, 300)
      _ns.set(memory)
      expect(
        util_keylet(
          ...buf.sbuf(),
          KEYLET_PAYCHAN,
          ..._a.sbuf(),
          ..._b.sbuf(),
          ..._ns.sbuf(),
          ctx,
        ),
      ).toBe(34n)
      const ans = [
        0x00, 0x78, 0x7d, 0xe1, 0x01, 0xf6, 0x2b, 0xb0, 0x55, 0x80, 0xb9, 0xd6,
        0xb0, 0x3f, 0x3b, 0xb0, 0x01, 0xbd, 0xe6, 0x9b, 0x89, 0x0f, 0x8a, 0xcd,
        0xbe, 0x71, 0x73, 0x5e, 0xc3, 0x63, 0xf8, 0xc5, 0x4b, 0x9b,
      ]
      expect(Buffer.from(buf.get(memory)).toString('hex')).toStrictEqual(
        Buffer.from(ans).toString('hex'),
      )
    })
  })
})
